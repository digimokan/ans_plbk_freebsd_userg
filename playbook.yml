- hosts: localhost
  connection: local
  vars_files:
    - host_vars/vault_clear.yml
    - host_vars/vault_enc.yml
  vars:
    machine_hostname: 'userg-workstation0.machine'
    admin_user_and_group_name: "admin"
    sudo_users_group_name: "wheel"
    root_user_group_name: "wheel"
    github_user_name: "digimokan"
    video_card_make: "AMD"
    video_card_series: "GCN_3_4_5_RDNA"
    video_card_number: "0"
    video_card_bus: "1:0:0"
    left_monitor_id: "DP-1"
    left_monitor_resolution: "2560x2880"
    center_monitor_id: "HDMI-1"
    center_monitor_resolution: "2560x1440"
    right_monitor_id: "DP-2"
    right_monitor_resolution: "2560x2880"
    zfs_pool: "zroot"
    # Note: temporarily set these user_password vars on first playbook run
    admin_user_password_for_login: ''
    admin_user_password_for_zfs_homedir_dataset: ''
    admin_user_password_for_bitwarden: ''
    admin_user_home_dir: "/home/{{ admin_user_and_group_name }}"
    admin_user_documents_dir: "/home/{{ admin_user_and_group_name }}/Documents"
    admin_user_desktop_dir: "/home/{{ admin_user_and_group_name }}/Desktop"
    admin_user_download_dir: "/home/{{ admin_user_and_group_name }}/Downloads"
    admin_user_music_dir: "/home/{{ admin_user_and_group_name }}/Music"
    admin_user_pictures_dir: "/home/{{ admin_user_and_group_name }}/Pictures"
    admin_user_videos_dir: "/home/{{ admin_user_and_group_name }}/Videos"
    admin_user_trash_dir: "/home/{{ admin_user_and_group_name }}/Trash"
    admin_user_local_dir: "/home/{{ admin_user_and_group_name }}/Local"
    admin_user_cache_dir: "/home/{{ admin_user_and_group_name }}/Cache"
    admin_user_devel_dir: "/home/{{ admin_user_and_group_name }}/Devel"
    admin_user_books_dir: "/home/{{ admin_user_and_group_name }}/Books"
    admin_user_snapped_photos_dir: "/home/{{ admin_user_and_group_name }}/Photos"
    admin_user_podcasts_dir: "/home/{{ admin_user_and_group_name }}/Podcasts"
    admin_user_temp_sync_dir: "/home/{{ admin_user_and_group_name }}/Sync"
    admin_user_qutebrowser_browse_history_db_path: "{{ admin_user_cache_dir }}/qutebrowser_browse_history.sqlite"
    admin_user_firefox_bookmarks_and_browse_history_path: "{{ admin_user_cache_dir }}/firefox_bookmarks_and_browse_history.sqlite"
    admin_user_firefox_bookmark_icons_path: "{{ admin_user_cache_dir }}/firefox_bookmark_icons.sqlite"
    admin_user_firefox_search_and_forms_history_path: "{{ admin_user_cache_dir }}/firefox_search_and_forms_history.sqlite"
    admin_user_chromium_browse_and_search_history_path: "{{ admin_user_cache_dir }}/chromium_browse_and_search_history.sqlite"
    admin_user_chromium_forms_history_path: "{{ admin_user_cache_dir }}/chromium_forms_history.sqlite"
    admin_user_chromium_bookmarks_path: "{{ admin_user_cache_dir }}/chromium_bookmarks.sqlite"
    admin_user_newsboat_rss_feed_tracking_db_path: "{{ admin_user_cache_dir }}/newsboat_rss_feed_tracking.sqlite"
    admin_user_musicpd_db_file_path: "{{ admin_user_music_dir }}/mpd_database"
    admin_user_musicpd_playlists_dir: "{{ admin_user_music_dir }}/MPD Playlists"
  tasks:
    - name: "Define a list of LAN hosts (names, addresses, etc)"
      ansible.builtin.include_role:
        name: ans_vars_lan_hosts
        public: true
    - name: "Configure the machine's hostname"
      ansible.builtin.include_role:
        name: ans_role_config_hostname
      vars:
        cfg_hostname_hostname: "{{ machine_hostname }}"
    - name: "Configure system clock, time, and time zone"
      ansible.builtin.include_role:
        name: ext/ans_role_config_time
    - name: "Configure OS security hardening options"
      ansible.builtin.include_role:
        name: ans_role_config_security_hardening
    - name: "Configure system and package upgrades"
      ansible.builtin.include_role:
        name: ext/ans_role_config_upgrades
    - name: "Configure the FreeBSD 'loader' bootloader"
      ansible.builtin.include_role:
        name: ext/ans_role_config_loader
      vars:
        load_cpu_microcode_updates: true
    - name: "Install and configure the OSS sound driver layer"
      ansible.builtin.include_role:
        name: ext/ans_role_config_oss
        public: true
      vars:
        # Note: enable USB speakers as default PCM sound device
        oss_load_usb_audio_driver_at_boot: true
    - name: "Install and configure video card drivers"
      ansible.builtin.include_role:
        name: ext/ans_role_config_video_drivers
        public: true
      vars:
        cfg_video_card_make: "{{ video_card_make }}"
        cfg_video_card_series: "{{ video_card_series }}"
        cfg_video_freebsd_build_drm_pkg_from_ports: true
    - name: "Configure webcam support"
      ansible.builtin.include_role:
        name: ans_role_config_webcam
        public: true
    - name: "Install and configure the FreeBSD Linux Binary-Compat Layer"
      ansible.builtin.include_role:
        name: ans_role_config_freebsd_linux_compat
        public: true
    - name: "Install and configure GNU coreutils"
      ansible.builtin.include_role:
        name: ans_role_config_gnu_coreutils
        public: true
    - name: "Add and configure sudo-users group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_group
      vars:
        cfg_group_name: "{{ sudo_users_group_name }}"
        cfg_group_is_system_group: true
    - name: "Add and configure admin group '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_group
      vars:
        cfg_group_name: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the python passlib password-hashing module"
      ansible.builtin.include_role:
        name: ans_role_config_passlib
        public: true
    - name: "Add and configure admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_user
      vars:
        cfg_user_name: "{{ admin_user_and_group_name }}"
        cfg_user_password: "{{ admin_user_password_for_login }}"
        cfg_user_primary_group: "{{ admin_user_and_group_name }}"
        cfg_user_groups:
          - "{{ sudo_users_group_name }}"
          - "{{ cfg_video_group_name }}"
          - "{{ webcam_group_name }}"
        cfg_user_create_home_dir_in_existing_filesystem: false
        cfg_user_path_to_home_dir: "{{ admin_user_home_dir }}"
        cfg_user_comment: "{{ admin_user_and_group_name }}"
        cfg_user_password_hash_type: "{{ passlib_password_hash_type }}"
        cfg_user_password_salt: "{{ passlib_password_constant_salt }}"
    - name: "Install and configure the lsblk block-device info utility"
      ansible.builtin.include_role:
        name: ans_role_config_lsblk
        public: true
    - name: "Install and configure ZFS hardware: disks, pools, vdevs, and devices"
      ansible.builtin.include_role:
        name: ans_role_config_zfs_hw
    - name: "Create and configure zfs filesystem datasets"
      ansible.builtin.include_role:
        name: ans_role_config_zfs_datasets
      vars:
        zfs_datasets_to_create:
          - { pool: "{{ zpl }}", path: "{{ hdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '710', enc: "{{ hpswd }}" }
          - { pool: "{{ zpl }}", path: "{{ odir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ kdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ wdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ udir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ idir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ vdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ tdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ ldir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ adir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ edir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ bdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ pdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ cdir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ ydir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755', enc: '' }
        zpl: "{{ zfs_pool }}"
        hdir: "{{ admin_user_home_dir }}"
        hpswd: "{{ admin_user_password_for_zfs_homedir_dataset }}"
        odir: "{{ admin_user_documents_dir }}"
        kdir: "{{ admin_user_desktop_dir }}"
        wdir: "{{ admin_user_download_dir }}"
        udir: "{{ admin_user_music_dir }}"
        idir: "{{ admin_user_pictures_dir }}"
        vdir: "{{ admin_user_videos_dir }}"
        tdir: "{{ admin_user_trash_dir }}"
        ldir: "{{ admin_user_local_dir }}"
        adir: "{{ admin_user_cache_dir }}"
        edir: "{{ admin_user_devel_dir }}"
        bdir: "{{ admin_user_books_dir }}"
        pdir: "{{ admin_user_snapped_photos_dir }}"
        cdir: "{{ admin_user_podcasts_dir }}"
        ydir: "{{ admin_user_temp_sync_dir }}"
        ausg: "{{ admin_user_and_group_name }}"
    - name: "Create and configure XDG user dirs for '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_xdg_user_dirs
      vars:
        user_name: "{{ admin_user_and_group_name }}"
    - name: "Configure sudo settings for auth group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sudo
        public: true
      vars:
        ask_password_timeout: 'ask_once'
        password_prompt_timeout_minutes: 0
        use_root_umask: true
        set_auth_for_group: "{{ sudo_users_group_name }}"
    - name: "Clone playbook used to set up the machine, and emplace vault password"
      ansible.builtin.include_role:
        name: ans_role_config_user_playbook
      vars:
        cfg_user_playbook_pb_name: "{{ playbook_dir | basename }}"
        cfg_user_playbook_target_user_name: "{{ admin_user_and_group_name }}"
        cfg_user_playbook_target_group_name: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the OpenSSH client"
      ansible.builtin.include_role:
        name: ans_role_config_openssh_client
        public: true
      vars:
        openssh_client_user_name: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the jq command-line json parser"
      ansible.builtin.include_role:
        name: ans_role_config_jq
        public: true
    - name: "Install and configure the xsel clipboard provider"
      ansible.builtin.include_role:
        name: ans_role_config_xsel
        public: true
    - name: "Install and configure the fzf command-line fuzzy finder"
      ansible.builtin.include_role:
        name: ans_role_config_fzf
        public: true
    - name: "Install and configure the Bitwarden CLI password manager utility"
      ansible.builtin.include_role:
        name: ans_role_config_bitwarden_cli
        public: true
      vars:
        bitwarden_user_name: "{{ admin_user_and_group_name }}"
        bitwarden_master_password: "{{ admin_user_password_for_bitwarden }}"
        bitwarden_check_freebsd_linux_compat_cmd: "{{ freebsd_linux_compat_check_cmd }}"
        bitwarden_cli_api_key_client_id: "{{ vault_clear_bitwarden_api_key_client_id }}"
        bitwarden_cli_api_key_client_secret: "{{ vault_clear_bitwarden_api_key_client_secret }}"
        bitwarden_cli_exec_jq_cmd: "{{ jq_main_cmd }}"
        bitwarden_cli_exec_xsel_cmd: "{{ xsel_main_cmd }}"
        bitwarden_cli_exec_fzf_cmd: "{{ fzf_main_cmd }}"
    - name: "Install and configure YubiKey management utilities"
      ansible.builtin.include_role:
        name: ans_role_config_yubikey
        public: true
      vars:
        yubikey_config_ssh_utility_script_cmd: "{{ openssh_client_utility_script_cmd }}"
        yubikey_user_name: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the feh image viewer utility"
      ansible.builtin.include_role:
        name: ans_role_config_feh
        public: true
    - name: "Install and configure the GNU Image Manipulation Program"
      ansible.builtin.include_role:
        name: ans_role_config_gnu_image_mp
        public: true
    - name: "Install and configure the sndio sound driver layer"
      ansible.builtin.include_role:
        name: ans_role_config_sndio
    - name: "Install and configure the Network File System (NFS) client"
      ansible.builtin.include_role:
        name: ans_role_config_nfs_client
        public: true
    - name: "Install and configure the autofs automatic device/NFS-mounting utility"
      ansible.builtin.include_role:
        name: ans_role_config_autofs
        public: true
      vars:
        autofs_mount_nfs_share_cmd: "{{ nfs_client_mount_nfs_share }}"
        autofs_enable_auto_device_mounting: false
        autofs_enable_auto_nfs_share_mounting: true
    - name: "Install and configure the udisks device-mounting utility"
      ansible.builtin.include_role:
        name: ans_role_config_udisks
        public: true
    - name: "Install a standard set of system font packages"
      ansible.builtin.include_role:
        name: ext/ans_role_config_fonts
      vars:
        install_liberation_font: true
        install_dejavu_font: true
        install_droid_font: true
        install_nerd_fonts: true
        install_ms_legacy_fonts: true
        install_ms_vista_fonts: true
    - name: "Install and configure the LibreOffice office application suite"
      ansible.builtin.include_role:
        name: ans_role_config_libreoffice
        public: true
    - name: "Install and configure the atril pdf viewer"
      ansible.builtin.include_role:
        name: ans_role_config_atril
        public: true
    - name: "Install and configure the pdfarranger utility"
      ansible.builtin.include_role:
        name: ans_role_config_pdfarranger
        public: true
    - name: "Install and configure the unzip archive extraction utility"
      ansible.builtin.include_role:
        name: ans_role_config_unzip
        public: true
    - name: "Install and configure the calibre ebook management application"
      ansible.builtin.include_role:
        name: ans_role_config_calibre
      vars:
        calibre_user_name: "{{ admin_user_and_group_name }}"
        calibre_user_book_lib_dir: "{{ admin_user_books_dir }}"
        calibre_enable_dedrm_plugin_collection: true
        cablibre_unzip_main_cmd: "{{ unzip_main_cmd }}"
        calibre_dedrm_plugin_kindle_serial_num_list: "{{ vault_clear_dedrm_plugin_kindle_serial_num_list }}"
    - name: "Install and configure the VLC video player"
      ansible.builtin.include_role:
        name: ans_role_config_vlc
        public: true
      vars:
        enable_dvd_support: true
    - name: "Install and configure the MPD Music Player Daemon"
      ansible.builtin.include_role:
        name: ans_role_config_musicpd
        public: true
      vars:
        musicpd_user_name: "{{ admin_user_and_group_name }}"
        musicpd_music_dir: "{{ admin_user_music_dir }}"
        musicpd_user_music_db_file_path: "{{ admin_user_musicpd_db_file_path }}"
        musicpd_user_playlists_dir: "{{ admin_user_musicpd_playlists_dir }}"
        musicpd_output_sound_server_name: "{{ oss_sound_server_name }}"
    - name: "Define list of browser search providers"
      ansible.builtin.include_role:
        name: ext/ans_vars_browser_search_providers
        public: true
    - name: "Install and configure the qutebrowser web-browser"
      ansible.builtin.include_role:
        name: ans_role_config_qutebrowser
        public: true
      vars:
        qutebrowser_user_name: "{{ admin_user_and_group_name }}"
        qutebrowser_user_download_dir: "{{ admin_user_download_dir }}"
        qutebrowser_search_providers: "{{ browser_search_providers }}"
        qutebrowser_sans_font_family: "{{ liberation_font_name_sans }}"
        qutebrowser_serif_font_family: "{{ liberation_font_name_serif }}"
        qutebrowser_mono_font_family: "{{ liberation_font_name_mono }}"
        qutebrowser_quickmarks_url_list: "{{ vault_clear_quickmarks_url_list }}"
        qutebrowser_try_link_to_saved_history_db_path: "{{ admin_user_qutebrowser_browse_history_db_path }}"
    - name: "Install and configure the Firefox browser"
      ansible.builtin.include_role:
        name: ans_role_config_firefox
        public: true
      vars:
        firefox_user_name: "{{ admin_user_and_group_name }}"
        firefox_install_google_widevine_drm_addon: true
        firefox_install_vimium_ext: true
        firefox_install_bitwarden_ext: true
        firefox_install_user_agent_switcher_ext: true
        firefox_allow_user_extension_install: true
        firefox_search_providers: "{{ browser_search_providers }}"
        firefox_try_link_to_saved_bookmarks_and_browse_history_path: "{{ admin_user_firefox_bookmarks_and_browse_history_path }}"
        firefox_try_link_to_saved_bookmark_icons_history_path: "{{ admin_user_firefox_bookmark_icons_path }}"
        firefox_try_link_to_saved_search_and_forms_history_path: "{{ admin_user_firefox_search_and_forms_history_path }}"
    - name: "Install and configure the Chromium browser"
      ansible.builtin.include_role:
        name: ans_role_config_chromium
        public: true
      vars:
        chromium_user_name: "{{ admin_user_and_group_name }}"
        chromium_install_vimium_ext: true
        chromium_install_bitwarden_ext: true
        chromium_install_user_agent_switcher_ext: true
        chromium_allow_user_ext_install: true
        chromium_search_providers: "{{ browser_search_providers }}"
        chromium_try_link_to_saved_user_browse_and_search_history_path: "{{ admin_user_chromium_browse_and_search_history_path }}"
        chromium_try_link_to_saved_user_form_history_path: "{{ admin_user_chromium_forms_history_path }}"
        chromium_try_link_to_saved_user_bookmarks_path: "{{ admin_user_chromium_bookmarks_path }}"
    - name: "Install and configure Avahi"
      ansible.builtin.include_role:
        name: ans_role_config_avahi
        public: true
      vars:
        enable_host_discovery_service: true
    - name: "Configure automatic printer discovery and driverless printing"
      ansible.builtin.include_role:
        name: ans_role_config_automatic_printing
      vars:
        notify_avahi_handler_on_auto_printing_change: "{{ handler_to_restart_avahi_services }}"
    - name: "Configure automatic scanner discovery and driverless scanning"
      ansible.builtin.include_role:
        name: ans_role_config_automatic_scanning
      vars:
        notify_avahi_handler_on_auto_printing_change: "{{ handler_to_restart_avahi_services }}"
    - name: "Install and configure the simple-scan scanning application"
      ansible.builtin.include_role:
        name: ans_role_config_simple_scan
    - name: "Install and configure the OBS video-recording application"
      ansible.builtin.include_role:
        name: ans_role_config_obs
    - name: "Install and configure the avidemux video editing application"
      ansible.builtin.include_role:
        name: ans_role_config_avidemux
        public: true
    - name: "Install the restic backup program, and configure backups to a remote repo"
      ansible.builtin.include_role:
        name: ans_role_config_restic
      vars:
        restic_user_name: "{{ admin_user_and_group_name }}"
        restic_s3_bucket_url: "{{ vault_clear_restic_s3_bucket_url }}"
        restic_s3_bucket_key_id: "{{ vault_clear_restic_s3_bucket_key_id }}"
        restic_s3_bucket_secret_keystring: "{{ vault_clear_restic_s3_bucket_secret_keystring }}"
        restic_default_pass_cmd: >-
          {{ bitwarden_cli_utility_script_main_cmd }}
          --print-entry={{ 'Wasabi (User G)' | quote }}
          --custom-field={{ 'AMAZON_S3_BUCKET_REPO_KEYSTRING' | quote }}
          --no-interactive-search
        restic_automatic_daily_backup_dirs:
          - "{{ admin_user_home_dir }}/Documents/"
          - "{{ admin_user_home_dir }}/Templates/"
        restic_user_guide_dir: "{{ admin_user_home_dir }}/"
    - name: "Install and configure the maim screenshot-capture utility"
      ansible.builtin.include_role:
        name: ans_role_config_maim
        public: true
    - name: "Install and configure the eza ls-replacement utility"
      ansible.builtin.include_role:
        name: ans_role_config_eza
        public: true
    - name: "Install and configure the ripgrep command-line grep replacement"
      ansible.builtin.include_role:
        name: ans_role_config_ripgrep
        public: true
    - name: "Install and configure the bat enhanced-cat utility"
      ansible.builtin.include_role:
        name: ans_role_config_bat
        public: true
      vars:
        bat_user_name: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the clang C/C++ compiler"
      ansible.builtin.include_role:
        name: ans_role_config_clang
        public: true
    - name: "Install and configure the cmake build-system generator"
      ansible.builtin.include_role:
        name: ans_role_config_cmake
        public: true
    - name: "Install and configure the shellcheck shell script linter"
      ansible.builtin.include_role:
        name: ans_role_config_shellcheck
        public: true
    - name: "Install and configure the yamllint yaml linter"
      ansible.builtin.include_role:
        name: ans_role_config_yamllint
        public: true
      vars:
        yamllint_user_name: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the pylint python linter"
      ansible.builtin.include_role:
        name: ans_role_config_pylint
        public: true
    - name: "Install and configure the luacheck lua linter"
      ansible.builtin.include_role:
        name: ans_role_config_luacheck
        public: true
    - name: "Install and configure the neovim text editor"
      ansible.builtin.include_role:
        name: ans_role_config_neovim
        public: true
      vars:
        neovim_user_name: "{{ admin_user_and_group_name }}"
        neovim_ripgrep_cmd: "{{ ripgrep_main_cmd }}"
        neovim_lsp_server_cmd_list:
          - "{{ clang_start_language_server_cmd }}"
        neovim_clipboard_provider: "{{ xsel_main_cmd }}"
        neovim_linters:
          - { filetype: "python", cmd: "{{ pylint_main_cmd }}" }
          - { filetype: "sh", cmd: "{{ shellcheck_main_cmd }}" }
          - { filetype: "yaml", cmd: "{{ yamllint_main_cmd }}" }
          - { filetype: "lua", cmd: "{{ luacheck_main_cmd }}" }
    - name: "Install and configure the git version control system"
      ansible.builtin.include_role:
        name: ans_role_config_git
        public: true
      vars:
        git_machine_user_name: "{{ admin_user_and_group_name }}"
        git_vcs_user_name: "{{ github_user_name }}"
        git_text_editor: "{{ neovim_main_cmd }}"
        export_cmd_current_git_branch: true
    - name: "Set up fish shell for admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ans_role_config_fish
        public: true
      vars:
        fish_user_name: "{{ admin_user_and_group_name }}"
        fish_prompt_show_git_branch_cmd: "{{ git_cmd_current_git_branch }}"
        fish_command_functions:
          - name: 'll'
            body: >-
              {{ eza_long_listing_force_color_cmd }} $argv |
              {{ less_auto_page_with_raw_input_cmd }}
            descrip: 'print a long-listing with eza'
          - name: 'v'
            body: "{{ neovim_main_cmd }} $argv"
            descrip: 'start the neovim text editor'
          - name: 'm'
            body: "{{ sudo_main_cmd }} {{ udisks_utility_script_cmd }} $argv"
            descrip: 'mount or unmount a device'
          - name: 's'
            body: "{{ oss_utility_script_cmd }} $argv"
            descrip: 'enable sound devices and set volume'
    - name: "Define a set of terminal text, background, and cursor colors"
      ansible.builtin.include_role:
        name: ans_vars_terminal_colors
        public: true
    - name: "Define the WM icons, labels, and colors for windows, panel-bar, etc"
      ansible.builtin.include_role:
        name: ext/ans_vars_wm_labels_colors
        public: true
    - name: "Install and configure the wezterm terminal emulator"
      ansible.builtin.include_role:
        name: ans_role_config_wezterm
        public: true
      vars:
        wezterm_user_name: "{{ admin_user_and_group_name }}"
        wezterm_font_family: "{{ nerd_font_name_hack }}"
        wezterm_normal_font_size: 16
        wezterm_tab_bar_font_size: 17
        wezterm_char_select_font_size: 20
        wezterm_term_colors: "{{ terminal_colors }}"
        wezterm_shell_cmd: "{{ fish_main_cmd }}"
        wezterm_vcs_tree_icon: "{{ wm_panel_bar_status_item_labels.vcs_tree }}"
        wezterm_tab_bar_get_git_branch_cmd: "{{ git_cmd_current_git_branch }}"
    - name: "Install and configure the i3status panel-bar status area utility"
      ansible.builtin.include_role:
        name: ans_role_config_i3status
        public: true
      vars:
        i3status_user_name: "{{ admin_user_and_group_name }}"
        i3status_panel_bar_output_format: "i3bar"
        i3status_status_item_labels: "{{ wm_panel_bar_status_item_labels }}"
        i3status_status_item_separator: "{{ wm_panel_bar_status_item_separator }}"
        i3status_status_item_colors: "{{ wm_panel_bar_status_item_colors }}"
        show_wired_up_status_item: true
        show_audio_volume_status_item: true
        show_sys_load_avg_status_item: true
        show_date_time_status_item: true
    - name: "Install and configure the picom compositor"
      ansible.builtin.include_role:
        name: ans_role_config_picom
        public: true
    - name: "Install and configure the rofi application launcher"
      ansible.builtin.include_role:
        name: ans_role_config_rofi
        public: true
      vars:
        rofi_user_name: "{{ admin_user_and_group_name }}"
        rofi_font: "{{ liberation_font_name_sans }} 22"
    - name: "Install and configure xscreensaver"
      ansible.builtin.include_role:
        name: ans_role_config_xscreensaver
        public: true
      vars:
        xscreensaver_user_name: "{{ admin_user_and_group_name }}"
        screensaver_timeout_minutes: 10
        screensaver_screen_lock_enable: false
        monitor_turn_power_off: true
    - name: "Install and configure the ncmpcpp NCurses Music Player Client"
      ansible.builtin.include_role:
        name: ans_role_config_ncmpcpp
        public: true
      vars:
        ncmpcpp_user_name: "{{ admin_user_and_group_name }}"
        ncmpcpp_music_dir: "{{ admin_user_music_dir }}"
        ncmpcpp_mpd_service_host: 'localhost'
        ncmpcpp_mpd_service_port: "{{ musicpd_service_listen_port }}"
        ncmpcpp_external_text_editor_cmd: "{{ neovim_main_cmd }}"
    - name: "Install and configure the Newsboat news aggregator and Podboat podcast client"
      ansible.builtin.include_role:
        name: ans_role_config_newsboat
      vars:
        newsboat_user_name: "{{ admin_user_and_group_name }}"
        newsboat_rss_feed_url_list: "{{ vault_clear_rss_podcast_feed_url_list }}"
        podboat_podcast_download_dir: "{{ admin_user_podcasts_dir }}"
        newsboat_try_link_to_saved_rss_tracking_db_path: "{{ admin_user_newsboat_rss_feed_tracking_db_path }}"
    - name: "Install and configure the Audacity audio track editor"
      ansible.builtin.include_role:
        name: ans_role_config_audacity
        public: true
    - name: "Install and configure the Yazi file manager"
      ansible.builtin.include_role:
        name: ans_role_config_yazi
        public: true
      vars:
        yazi_user_name: "{{ admin_user_and_group_name }}"
        yazi_start_term_emulator: "{{ wezterm_main_cmd }}"
        yazi_term_arg_set_dir: "{{ wezterm_arg_starting_dir }}"
        yazi_term_arg_exec: "{{ wezterm_arg_exec }}"
        yazi_fileserver_ip_addr: >-
          {{ ans_vars_lan_host_list | selectattr('hostname', 'equalto',
          'fileserver0.machine') | map(attribute='addr') | first }}
        yazi_fileserver_dir: "{{ autofs_nfs_share_mount_dir }}/{{ yazi_fileserver_ip_addr }}"
        yazi_gnu_coreutils_mv_cmd: "{{ gnu_coreutils_mv_cmd }}"
        yazi_open_text_files_with_console: [ "{{ neovim_main_cmd }}" ]
        yazi_open_text_files_with_gui: [ "{{ libreoffice_main_cmd }}" ]
        yazi_open_image_files_with: [ "{{ feh_main_cmd }}", "{{ gnu_image_mp_main_cmd }}" ]
        yazi_open_office_files_with: [ "{{ libreoffice_main_cmd }}" ]
        yazi_open_pdf_files_with: [ "{{ atril_main_cmd }}", "{{ pdfarranger_main_cmd }}", "{{ gnu_image_mp_main_cmd }}" ]
        yazi_open_audio_files_with: [ "{{ vlc_main_cmd }}", "{{ audacity_main_cmd }}", "{{ ncmpcpp_main_cmd }}" ]
        yazi_open_video_files_with: [ "{{ vlc_main_cmd }}", "{{ avidemux_main_cmd }}" ]
        yazi_extra_keymaps_jump_to_dir:
          - { key_presses: '[ "g", "h"]', dir: "{{ admin_user_documents_dir }}/Hobbies", descrip: "Go to hobbies dir" }
    - name: "Add custom xxxx.desktop launcher files for terminal programs"
      ansible.builtin.include_role:
        name: ans_role_config_dot_desktops
        public: true
      vars:
        dot_desktops_start_term_emulator: "{{ wezterm_main_cmd }}"
        dot_desktops_term_arg_exec_cmd: "{{ wezterm_arg_exec }}"
        dot_desktops_launchers:
          - { cli: "{{ yazi_in_last_dir_cmd }}", name: 'yazi' }
          - { cli: "{{ ncmpcpp_main_cmd }}", name: 'ncmpcpp' }
    - name: "Install and configure the i3wm window manager"
      ansible.builtin.include_role:
        name: ext/ans_role_config_i3wm_wm
        public: true
      vars:
        i3_user_name: "{{ admin_user_and_group_name }}"
        i3wm_primary_monitor_id: "{{ center_monitor_id }}"
        i3wm_monitor_id_for_workspace_7: "{{ left_monitor_id }}"
        i3wm_monitor_id_for_workspace_8: "{{ center_monitor_id }}"
        i3wm_monitor_id_for_workspace_9: "{{ right_monitor_id }}"
        window_titles_font: "{{ liberation_font_name_sans }} 28"
        i3wm_window_colors: "{{ wm_window_colors }}"
        workspace_labels: "{{ wm_panel_bar_workspace_labels }}"
        cmd_start_compositor: "{{ picom_start_cmd }}"
        cmd_display_bg_wallpaper: "{{ feh_display_wallpaper_cmd }}"
        cmd_start_screensaver_utility: "{{ xscreensaver_start_cmd }}"
        cmd_screen_lock: "{{ xscreensaver_lock_cmd }}"
        cmd_launch_app_menu: "{{ rofi_start_app_launcher_cmd }}"
        cmd_start_term_emulator: "{{ wezterm_main_cmd }}"
        cmd_arg_term_emulator_class: "{{ wezterm_arg_class }}"
        cmd_inc_volume: "{{ oss_inc_volume_cmd }}"
        cmd_dec_volume: "{{ oss_dec_volume_cmd }}"
        cmd_capture_png_screenshot: "{{ maim_capture_screenshot_cmd }}"
        screenshot_png_save_dir: "{{ admin_user_home_dir }}/Desktop"
        cmd_start_panel_bar: "i3bar"
        i3bar_font: "{{ droid_font_name_mono }} 28"
        i3bar_bg_color: "{{ wm_panel_bar_bg_color }}"
        i3bar_workspace_colors: "{{ wm_panel_bar_workspace_colors }}"
        i3bar_status_area_cmd: "{{ i3status_start_cmd }}"
        i3bar_status_item_separator: "{{ wm_panel_bar_status_item_separator }}"
        i3bar_status_item_colors: "{{ wm_panel_bar_status_item_colors }}"
    - name: "Install and configure the Adwaita icon theme"
      ansible.builtin.include_role:
        name: ans_role_config_adwaita_icon_theme
        public: true
      vars:
        adwaita_user_name: "{{ admin_user_and_group_name }}"
        adwaita_mouse_pointer_size: 48
    - name: "Install and configure Xorg"
      ansible.builtin.include_role:
        name: ans_role_config_xorg
        public: true
      vars:
        xorg_user_name: "{{ admin_user_and_group_name }}"
        xorg_exec_de_or_wm: "{{ i3wm_session }}"
        xorg_key_repeat_delay_ms: '350'
        xorg_key_repeat_rate_hz: '25'
        xorg_external_video_card_number: "{{ video_card_number }}"
        xorg_external_video_card_bus: "{{ video_card_bus }}"
        xorg_xresources_lines:
          - "{{ adwaita_xresources_entries }}"
        xorg_monitors_layout_and_resolutions:
          - id: "{{ center_monitor_id }}"
            resolution: "{{ center_monitor_resolution }}"
            position: 'Primary'
          - id: "{{ left_monitor_id }}"
            resolution: "{{ left_monitor_resolution }}"
            position: "LeftOf {{ center_monitor_id }}"
          - id: "{{ right_monitor_id }}"
            resolution: "{{ right_monitor_resolution }}"
            position: "RightOf {{ center_monitor_id }}"
    - name: "Install and configure the XDM display manager"
      ansible.builtin.include_role:
        name: ans_role_config_xdm_dm
      vars:
        xdm_user_name: "{{ admin_user_and_group_name }}"
        xdm_user_xinitrc_path: "{{ xorg_user_xinitrc_path }}"
        xdm_extra_xresources_lines:
          - "{{ adwaita_xresources_entries }}"
    - name: "Define a set of LAN-common syncthing devices and shared syncthing folders"
      ansible.builtin.include_role:
        name: ans_vars_syncthing_devices_folders
        public: true
    - name: "Install and configure the syncthing file-sync application"
      ansible.builtin.include_role:
        name: ans_role_config_syncthing
      vars:
        syncthing_user_name: "{{ admin_user_and_group_name }}"
        syncthing_local_machine_hostname: "{{ machine_hostname }}"
        syncthing_local_machine_private_key: "{{ vault_clear_syncthing_local_machine_private_key }}"
        syncthing_local_machine_public_key: "{{ vault_clear_syncthing_local_machine_public_key }}"
        syncthing_local_machine_device_id: "{{ vault_clear_syncthing_local_machine_device_id }}"
        syncthing_list_of_local_folders_to_sync:
          - { folder_id: 'st_books', folder_path: "{{ admin_user_books_dir }}", sync_mode: 'sendreceive' }
          - { folder_id: 'st_pics', folder_path: "{{ admin_user_snapped_photos_dir }}", sync_mode: 'sendreceive' }
          - { folder_id: 'st_podcasts', folder_path: "{{ admin_user_podcasts_dir }}", sync_mode: 'sendreceive' }
          - { folder_id: 'st_sync', folder_path: "{{ admin_user_temp_sync_dir }}", sync_mode: 'sendreceive' }
        syncthing_list_of_available_sync_devices: "{{ ans_vars_list_of_available_syncthing_devices }}"
        syncthing_list_of_available_sync_folders: "{{ ans_vars_list_of_available_syncthing_folders }}"
    - name: "Set env vars, login actions, and logout actions for admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ans_role_config_shell
      vars:
        user_name: "{{ admin_user_and_group_name }}"
        shell_env_vars:
          - { name: 'VISUAL', val: "{{ neovim_main_cmd }}", descrip: 'set default text editor' }
          - { name: 'EDITOR', val: "{{ neovim_main_cmd }}", descrip: 'set default text editor (legacy, line-mode)' }
          - { name: 'PAGER', val: 'less', descrip: 'set default pager program' }
    - name: "Configure an attached Kinesis Advantage360 keyboard with custom keymaps"
      ansible.builtin.include_role:
        name: ans_role_config_kinesis_adv360_smartset
    - name: "Build and install packages using the FreeBSD ports tree"
      ansible.builtin.include_role:
        name: ans_role_config_freebsd_ports
      vars:
        freebsd_ports_package_list:
          - { port_group_and_name: "{{ cfg_video_freebsd_drm_pkg_port_name }}", always_rebuild_reinstall: false }

