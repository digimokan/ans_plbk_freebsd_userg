- hosts: localhost
  connection: local
  vars_files:
    - host_vars/vault.yml
  vars:
    admin_user_and_group_name: "admin"
    sudo_users_group_name: "wheel"
    root_user_group_name: "wheel"
    github_user_name: "digimokan"
    zfs_pool: "zroot"
    admin_user_home_dir: "/home/{{ admin_user_and_group_name }}"
    admin_user_trash_dir: "/home/{{ admin_user_and_group_name }}/Trash"
  tasks:
    - name: "Configure system clock, time, and time zone"
      ansible.builtin.include_role:
        name: ext/ans_role_config_time
    - name: "Configure system and package upgrades"
      ansible.builtin.include_role:
        name: ext/ans_role_config_upgrades
    - name: "Configure the FreeBSD 'loader' bootloader"
      ansible.builtin.include_role:
        name: ext/ans_role_config_loader
      vars:
        menu_timeout_seconds: "2"
        load_cpu_microcode_updates: true
    - name: "Install and configure the OSS sound driver layer"
      ansible.builtin.include_role:
        name: ext/ans_role_config_oss
        public: yes
      vars:
        sound_card_type: 'intel'
        force_set_sound_output_pcm_at_boot: '0'
        intel_nid_disable_list:
          - { card: '0', nid: '30', descrip: 'rear speaker/optical combo jack optical-out-channel' }
          - { card: '0', nid: '33', descrip: 'front headphones jack out-channel' }
          - { card: '1', nid: '3', descrip: 'rear HDMI jack audio-out-channel' }
    - name: "Install and configure video card drivers"
      ansible.builtin.include_role:
        name: ext/ans_role_config_video_drivers
        public: yes
      vars:
        video_card_make: "Intel"
        video_card_series: "HD"
    - name: "Configure webcam support"
      ansible.builtin.include_role:
        name: ans_role_config_webcam
        public: yes
    - name: "Install and configure GNU coreutils"
      ansible.builtin.include_role:
        name: ans_role_config_gnu_coreutils
        public: yes
    - name: "Add sudo-users group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_add_group
      vars:
        group_name: "{{ sudo_users_group_name }}"
        is_system_group: true
    - name: "Add and configure admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_add_user
      vars:
        user_name: "{{ admin_user_and_group_name }}"
        user_groups:
          - "{{ sudo_users_group_name }}"
          - "{{ video_group_name }}"
          - "{{ webcam_group_name }}"
        comment: "{{ admin_user_and_group_name }}"
        create_home_dir: false
    - name: "Create all zfs filesystem datasets for the system"
      ansible.builtin.include_role:
        name: ans_role_create_filesystem_datasets
      vars:
        filesystem_datasets:
          - { pool: "{{ zpl }}", path: '/home',      mount: '/home',     owner: 'root',       group: "{{ rusg }}", mode: '755' }
          - { pool: "{{ zpl }}", path: "{{ hdir }}", mount: 'inherited', owner: "{{ ausg }}", group: "{{ ausg }}", mode: '710' }
          - { pool: "{{ zpl }}", path: "{{ tdir }}", mount: 'inherited', owner: "{{ ausg }}", group: "{{ ausg }}", mode: '755' }
        zpl: "{{ zfs_pool }}"
        hdir: "{{ admin_user_home_dir }}"
        tdir: "{{ admin_user_trash_dir }}"
        rusg: "{{ root_user_group_name }}"
        ausg: "{{ admin_user_and_group_name }}"
    - name: "Create and configure XDG user dirs for '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_xdg_user_dirs
      vars:
        user_name: "{{ admin_user_and_group_name }}"
    - name: "Configure sudo settings for auth group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sudo
      vars:
        ask_password_timeout: 45
        password_prompt_timeout_minutes: 0
        use_root_umask: true
        set_auth_for_group: "{{ sudo_users_group_name }}"
    - name: "Clone this playbook repo to home dir of admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.git:
        repo: "https://github.com/digimokan/ans_plbk_freebsd_userg.git"
        dest: "{{ admin_user_home_dir }}/ans_plbk_freebsd_userg"
        update: no
      become: true
      become_user: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the sndio sound driver layer"
      ansible.builtin.include_role:
        name: ans_role_config_sndio
    - name: "Install and configure the automount device-mounting utility"
      ansible.builtin.include_role:
        name: ext/ans_role_config_automount
    - name: "Install and configure the LibreOffice office application suite"
      ansible.builtin.include_role:
        name: ans_role_config_libreoffice
    - name: "Install and configure the VLC video player"
      ansible.builtin.include_role:
        name: ans_role_config_vlc
      vars:
        enable_dvd_support: true
    - name: "Define list of browser search providers"
      ansible.builtin.include_role:
        name: ext/ans_role_vars_browser_search_providers
        public: yes
    - name: "Install and configure the Firefox browser"
      ansible.builtin.include_role:
        name: ans_role_config_firefox
      vars:
        user_name: "{{ admin_user_and_group_name }}"
        install_google_widevine_drm_addon: true
        install_vimium_ext: true
        allow_user_extension_install: true
        firefox_search_providers: "{{ browser_search_providers }}"
    - name: "Install and configure the Chromium browser"
      ansible.builtin.include_role:
        name: ans_role_config_chromium
      vars:
        install_vimium_ext: true
        allow_user_ext_install: true
        chromium_search_providers: "{{ browser_search_providers }}"
    - name: "Configure automatic printer discovery and driverless printing"
      ansible.builtin.include_role:
        name: ans_role_config_automatic_printing
    - name: "Configure automatic scanner discovery and driverless scanning"
      ansible.builtin.include_role:
        name: ans_role_config_automatic_scanning
    - name: "Install and configure the simple-scan scanning application"
      ansible.builtin.include_role:
        name: ans_role_config_simple_scan
    - name: "Install and configure the Cheese webcam snapshot application"
      ansible.builtin.include_role:
        name: ans_role_config_cheese
    - name: "Install and configure the OBS video-recording application"
      ansible.builtin.include_role:
        name: ans_role_config_obs
    - name: "Install the restic backup program, and configure backups to a remote repo"
      ansible.builtin.include_role:
        name: ans_role_config_restic
      vars:
        restic_user_name: "{{ admin_user_and_group_name }}"
        restic_s3_bucket_url: "{{ userg_restic_s3_bucket_url }}"
        restic_s3_bucket_key_id: "{{ userg_restic_s3_bucket_key_id }}"
        restic_s3_bucket_secret_keystring: "{{ userg_restic_s3_bucket_secret_keystring }}"
        automatic_restic_backup_dirs:
          - "{{ admin_user_home_dir }}/Documents/"
          - "{{ admin_user_home_dir }}/Templates/"
        restic_user_guide_dir: "{{ admin_user_home_dir }}/"
    - name: "Install a standard set of system font packages"
      ansible.builtin.include_role:
        name: ext/ans_role_config_fonts
      vars:
        install_liberation_font: true
        install_dejavu_font: true
        install_droid_font: true
        install_ms_legacy_fonts: true
        install_ms_vista_fonts: true
    - name: "Install and configure Xorg"
      ansible.builtin.include_role:
        name: ans_role_config_xorg
      vars:
        user_name: "{{ admin_user_and_group_name }}"
        create_user_xinitrc: true
        xorg_key_repeat_delay_ms_rate_hz: '350 25'
    - name: "Install and configure the git version control system"
      ansible.builtin.include_role:
        name: ans_role_config_git
        public: yes
      vars:
        git_machine_user_name: "{{ admin_user_and_group_name }}"
        git_vcs_user_name: "{{ github_user_name }}"
        export_cmd_current_git_branch: true
    - name: "Define a set of terminal text, background, and cursor colors"
      ansible.builtin.include_role:
        name: ans_role_vars_terminal_colors
        public: yes
    - name: "Define the WM icons, labels, and colors for windows, panel-bar, etc"
      ansible.builtin.include_role:
        name: ext/ans_role_vars_wm_labels_colors
        public: yes
    - name: "Install and configure the wezterm terminal emulator"
      ansible.builtin.include_role:
        name: ans_role_config_wezterm
        public: yes
      vars:
        wezterm_user_name: "{{ admin_user_and_group_name }}"
        font_family: 'DejaVu Sans Mono'
        font_size: 15
        wezterm_term_colors: "{{ terminal_colors }}"
        shell_cmd: 'fish'
        vcs_tree_icon: "{{ wm_panel_bar_status_item_labels.vcs_tree }}"
        tab_bar_get_git_branch_cmd: "{{ git_cmd_current_git_branch }}"
    - name: "Install and configure the i3status panel-bar status area utility"
      ansible.builtin.include_role:
        name: ans_role_config_i3status
        public: yes
      vars:
        i3status_user_name: "{{ admin_user_and_group_name }}"
        i3status_panel_bar_output_format: "i3bar"
        i3status_status_item_labels: "{{ wm_panel_bar_status_item_labels }}"
        i3status_status_item_separator: "{{ wm_panel_bar_status_item_separator }}"
        i3status_status_item_colors: "{{ wm_panel_bar_status_item_colors }}"
        show_wired_up_status_item: true
        show_audio_volume_status_item: true
        show_sys_load_avg_status_item: true
        show_date_time_status_item: true
    - name: "Install and configure the picom compositor"
      ansible.builtin.include_role:
        name: ans_role_config_picom
        public: yes
    - name: "Install and configure the rofi application launcher"
      ansible.builtin.include_role:
        name: ans_role_config_rofi
        public: yes
      vars:
        rofi_user_name: "{{ admin_user_and_group_name }}"
        rofi_font: "Liberation Sans 22"
    - name: "Install and configure the feh image viewer utility"
      ansible.builtin.include_role:
        name: ans_role_config_feh
        public: yes
    - name: "Install and configure xscreensaver"
      ansible.builtin.include_role:
        name: ans_role_config_xscreensaver
        public: yes
      vars:
        xscreensaver_user_name: "{{ admin_user_and_group_name }}"
        screensaver_timeout_minutes: 10
        screensaver_screen_lock_enable: false
        monitor_turn_power_off: true
    - name: "Install and configure the maim screenshot-capture utility"
      ansible.builtin.include_role:
        name: ans_role_config_maim
        public: yes
    - name: "Install and configure the fzf command-line fuzzy finder"
      ansible.builtin.include_role:
        name: ans_role_config_fzf
        public: yes
    - name: "Install and configure the neovim text editor"
      ansible.builtin.include_role:
       name: ans_role_config_neovim
       public: yes
    - name: "Install and configure the ranger file manager"
      ansible.builtin.include_role:
        name: ans_role_config_ranger
      vars:
        ranger_user_name: "{{ admin_user_and_group_name }}"
        # note: wezterm supports iterm2 image-display protocol
        image_preview_program: "iterm2"
        ranger_fzf_cmd: "{{ fzf_main_cmd }}"
        ranger_gnu_coreutils_mv_cmd: "{{ gnu_coreutils_mv_cmd }}"
        ranger_trash_dir: "{{ admin_user_trash_dir }}"
        start_term_emulator: "{{ wezterm_main_cmd }}"
        term_arg_set_dir: "{{ wezterm_arg_starting_dir }}"
        term_arg_exec_cmd: "{{ wezterm_arg_exec }}"
        start_text_editor: "{{ neovim_main_cmd }}"
    - name: "Add custom xxxx.desktop launcher files for terminal programs"
      ansible.builtin.include_role:
        name: ans_role_config_dot_desktops
        public: yes
      vars:
        start_term_emulator: "{{ wezterm_main_cmd }}"
        term_arg_exec_cmd: "{{ wezterm_arg_exec }}"
        dot_desktop_launchers:
          - { cli: 'ranger', name: 'ranger' }
    - name: "Install and configure the i3wm window manager"
      ansible.builtin.include_role:
        name: ext/ans_role_config_i3wm_wm
        public: yes
      vars:
        i3_user_name: "{{ admin_user_and_group_name }}"
        window_titles_font: "Liberation Sans 19"
        i3wm_window_colors: "{{ wm_window_colors }}"
        workspace_labels: "{{ wm_panel_bar_workspace_labels }}"
        cmd_start_compositor: "{{ picom_start_cmd }}"
        cmd_display_bg_wallpaper: "{{ feh_display_wallpaper_cmd }}"
        cmd_start_screensaver_utility: "{{ xscreensaver_start_cmd }}"
        cmd_screen_lock: "{{ xscreensaver_lock_cmd }}"
        cmd_launch_app_menu: "{{ rofi_start_app_launcher_cmd }}"
        cmd_start_term_emulator: "{{ wezterm_main_cmd }}"
        cmd_arg_term_emulator_class: "{{ wezterm_arg_class }}"
        cmd_inc_volume: "{{ oss_inc_volume_cmd }}"
        cmd_dec_volume: "{{ oss_dec_volume_cmd }}"
        cmd_capture_png_screenshot: "{{ maim_capture_screenshot_cmd }}"
        screenshot_png_save_dir: "{{ admin_user_home_dir }}/Desktop"
        cmd_start_panel_bar: "i3bar"
        i3bar_font: "Droid Sans Mono 18"
        i3bar_bg_color: "{{ wm_panel_bar_bg_color }}"
        i3bar_workspace_colors: "{{ wm_panel_bar_workspace_colors }}"
        i3bar_status_area_cmd: "{{ i3status_start_cmd }}"
        i3bar_status_item_separator: "{{ wm_panel_bar_status_item_separator }}"
        i3bar_status_item_colors: "{{ wm_panel_bar_status_item_colors }}"
    - name: "Install and configure the XDM display manager"
      ansible.builtin.include_role:
        name: ans_role_config_xdm_dm
      vars:
        xdm_user_name: "{{ admin_user_and_group_name }}"
        session: "{{ i3wm_session }}"
    - name: "Set up fish shell for admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ans_role_config_fish
      vars:
        user_name: "{{ admin_user_and_group_name }}"
    - name: "Set env vars, login actions, and logout actions for admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ans_role_config_shell
      vars:
        user_name: "{{ admin_user_and_group_name }}"

